{
    "description": null,
    "enabled": true,
    "entry_point": "src/wrapper.py",
    "name": "server.list",
    "parameters": {
        "all_projects": {
            "default": false,
            "description": "Include all projects (admin only)",
            "type": "boolean"
        },
        "base": {
            "default": "server list",
            "immutable": true,
            "type": "string"
        },
        "changes_since": {
            "description": "List only servers changed after a certain point of time. The provided time should be an ISO 8061 formatted time. ex 2016-03-04T06:27:59Z .",
            "type": "string"
        },
        "cloud": {
            "description": "A specific cloud to query",
            "type": "string"
        },
        "deleted": {
            "default": false,
            "description": "Only display deleted servers (Admin only).",
            "type": "boolean"
        },
        "ep": {
            "default": "EntryPoint.parse('server_list = openstackclient.compute.v2.server:ListServer')",
            "immutable": true,
            "type": "string"
        },
        "flavor": {
            "description": "Search by flavor (name or ID)",
            "type": "string"
        },
        "format": {
            "default": "json",
            "description": "the output format, defaults to table (choices: csv, json, table, value, yaml)",
            "type": "string"
        },
        "host": {
            "description": "Search by hostname",
            "type": "string"
        },
        "image": {
            "description": "Search by image (name or ID)",
            "type": "string"
        },
        "instance_name": {
            "description": "Regular expression to match instance name (admin only)",
            "type": "string"
        },
        "ip": {
            "description": "Regular expression to match IP addresses",
            "type": "string"
        },
        "ip6": {
            "description": "Regular expression to match IPv6 addresses",
            "type": "string"
        },
        "limit": {
            "description": "Maximum number of servers to display. If limit equals -1, all servers will be displayed. If limit is greater than 'osapi_max_limit' option of Nova API, 'osapi_max_limit' will be used instead.",
            "type": "integer"
        },
        "long": {
            "default": false,
            "description": "List additional fields in output",
            "type": "boolean"
        },
        "marker": {
            "description": "The last server of the previous page. Display list of servers after marker. Display all servers if not specified. (name or ID)",
            "type": "string"
        },
        "name": {
            "description": "Regular expression to match names",
            "type": "string"
        },
        "no_name_lookup": {
            "default": false,
            "description": "Skip flavor and image name lookup.",
            "type": "boolean"
        },
        "noindent": {
            "default": false,
            "description": "whether to disable indenting the JSON",
            "type": "boolean"
        },
        "project": {
            "description": "Search by project (admin only) (name or ID)",
            "type": "string"
        },
        "project_domain": {
            "description": "Domain the project belongs to (name or ID). This can be used in case collisions between project names exist.",
            "type": "string"
        },
        "project_id": {
            "description": "Run the action under a different project, identified by id",
            "type": "string"
        },
        "project_name": {
            "description": "Run the action under a different project, identified by name",
            "type": "string"
        },
        "reservation_id": {
            "description": "Only return instances that match the reservation",
            "type": "string"
        },
        "status": {
            "description": "Search by server status",
            "type": "string"
        },
        "user": {
            "description": "Search by user (admin only) (name or ID)",
            "type": "string"
        },
        "user_domain": {
            "description": "Domain the user belongs to (name or ID). This can be used in case collisions between user names exist.",
            "type": "string"
        }
    },
    "runner_type": "python-script"
}
