{
    "description": null,
    "enabled": true,
    "entry_point": "run.py",
    "name": "lex-runtime_post_text",
    "pack": "aws",
    "parameters": {
        "account_id": {
            "type": "string"
        },
        "action": {
            "default": "post_text",
            "immutable": true,
            "type": "string"
        },
        "botAlias": {
            "description": "The alias of the Amazon Lex bot.",
            "required": true,
            "type": "string"
        },
        "botName": {
            "description": "The name of the Amazon Lex bot.",
            "required": true,
            "type": "string"
        },
        "cls": {
            "default": "lex-runtime",
            "type": "string"
        },
        "headers": {
            "type": "string"
        },
        "inputText": {
            "description": "The text that the user entered (Amazon Lex interprets this text).",
            "required": true,
            "type": "string"
        },
        "module_path": {
            "default": "boto3",
            "immutable": true,
            "type": "string"
        },
        "region": {
            "type": "string"
        },
        "sessionAttributes": {
            "description": " By using session attributes, a client application can pass contextual information in the request to Amazon Lex For example,    In Getting Started Exercise 1, the example bot uses the price session attribute to maintain the price of the flowers ordered (for example, 'Price':25). The code hook (the Lambda function) sets this attribute based on the type of flowers ordered. For more information, see Review the Details of Information Flow.    In the BookTrip bot exercise, the bot uses the currentReservation session attribute to maintain slot data during the in-progress conversation to book a hotel or book a car. For more information, see Details of Information Flow.    You might use the session attributes (key, value pairs) to track the requestID of user requests.    Amazon Lex simply passes these session attributes to the Lambda functions configured for the intent. In your Lambda function, you can also use the session attributes for initialization and customization (prompts and response cards). Some examples are:    Initialization - In a pizza ordering bot, if you can pass the user location as a session attribute (for example, 'Location' : '111 Maple street'), then your Lambda function might use this information to determine the closest pizzeria to place the order (perhaps to set the storeAddress slot value).     Personalize prompts - For example, you can configure prompts to refer to the user name. (For example, 'Hey [FirstName], what toppings would you like?'). You can pass the user name as a session attribute ('FirstName' : 'Joe') so that Amazon Lex can substitute the placeholder to provide a personalize prompt to the user ('Hey Joe, what toppings would you like?').      Amazon Lex does not persist session attributes.   If you configure a code hook for the intent, Amazon Lex passes the incoming session attributes to the Lambda function. If you want Amazon Lex to return these session attributes back to the client, the Lambda function must return them.   If there is no code hook configured for the intent, Amazon Lex simply returns the session attributes back to the client application.  ",
            "type": "object"
        },
        "userId": {
            "description": "The ID of the client application user. The application developer decides the user IDs. At runtime, each request must include the user ID. Typically, each of your application users should have a unique ID. Note the following considerations:     If you want a user to start a conversation on one device and continue the conversation on another device, you might choose a user-specific identifier, such as a login or Amazon Cognito user ID (assuming your application is using Amazon Cognito).     If you want the same user to be able to have two independent conversations on two different devices, you might choose a device-specific identifier, such as device ID, or some globally unique identifier.   ",
            "required": true,
            "type": "string"
        }
    },
    "runner_type": "python-script"
}
