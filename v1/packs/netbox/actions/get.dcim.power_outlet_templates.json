{
    "description": "Get a list of power outlet template objects.",
    "enabled": true,
    "entry_point": "run.py",
    "name": "get.dcim.power_outlet_templates",
    "parameters": {
        "created": {
            "description": "Created",
            "required": false,
            "type": "array"
        },
        "created__empty": {
            "description": "Created is empty/null (boolean)",
            "required": false,
            "type": "array"
        },
        "created__gt": {
            "description": "Created greater than",
            "required": false,
            "type": "array"
        },
        "created__gte": {
            "description": "Created greater than or equal to",
            "required": false,
            "type": "array"
        },
        "created__lt": {
            "description": "Created less than",
            "required": false,
            "type": "array"
        },
        "created__lte": {
            "description": "Created less than or equal to",
            "required": false,
            "type": "array"
        },
        "created__n": {
            "description": "Created not equal to",
            "required": false,
            "type": "array"
        },
        "created_by_request": {
            "description": "Created_by_request",
            "required": false,
            "type": "string"
        },
        "description": {
            "description": "Description",
            "required": false,
            "type": "array"
        },
        "description__empty": {
            "description": "Description is empty/null (boolean)",
            "required": false,
            "type": "boolean"
        },
        "description__ic": {
            "description": "Description contains (case-insensitive)",
            "required": false,
            "type": "array"
        },
        "description__ie": {
            "description": "Description exact match (case-insensitive)",
            "required": false,
            "type": "array"
        },
        "description__iew": {
            "description": "Description ends with (case-insensitive)",
            "required": false,
            "type": "array"
        },
        "description__isw": {
            "description": "Description starts with (case-sensitive)",
            "required": false,
            "type": "array"
        },
        "description__n": {
            "description": "Description not equal to",
            "required": false,
            "type": "array"
        },
        "description__nic": {
            "description": "Description does not contain (case-insensitive)",
            "required": false,
            "type": "array"
        },
        "description__nie": {
            "description": "Description inverse exact match (case-insensitive)",
            "required": false,
            "type": "array"
        },
        "description__niew": {
            "description": "Description does not end with (case-insensitive)",
            "required": false,
            "type": "array"
        },
        "description__nisw": {
            "description": "Description does not start with (case-sensitive)",
            "required": false,
            "type": "array"
        },
        "device_type_id": {
            "description": "Device type (ID)",
            "required": false,
            "type": "array"
        },
        "device_type_id__n": {
            "description": "Device_type_id not equal to",
            "required": false,
            "type": "array"
        },
        "devicetype_id": {
            "description": "Device type (ID)",
            "required": false,
            "type": "array"
        },
        "devicetype_id__n": {
            "description": "Devicetype_id not equal to",
            "required": false,
            "type": "array"
        },
        "endpoint_uri": {
            "default": "/dcim/power-outlet-templates/",
            "immutable": true,
            "type": "string"
        },
        "feed_leg": {
            "description": "Phase (for three-phase feeds)",
            "required": false,
            "type": "array"
        },
        "feed_leg__n": {
            "description": "Feed_leg not equal to",
            "required": false,
            "type": "array"
        },
        "get_detail_route_eligible": {
            "default": true,
            "immutable": true,
            "type": "boolean"
        },
        "http_verb": {
            "default": "get",
            "immutable": true,
            "type": "string"
        },
        "id": {
            "description": "Id",
            "required": false,
            "type": "array"
        },
        "id__empty": {
            "description": "Id is empty/null (boolean)",
            "required": false,
            "type": "boolean"
        },
        "id__gt": {
            "description": "Id greater than",
            "required": false,
            "type": "array"
        },
        "id__gte": {
            "description": "Id greater than or equal to",
            "required": false,
            "type": "array"
        },
        "id__lt": {
            "description": "Id less than",
            "required": false,
            "type": "array"
        },
        "id__lte": {
            "description": "Id less than or equal to",
            "required": false,
            "type": "array"
        },
        "id__n": {
            "description": "Id not equal to",
            "required": false,
            "type": "array"
        },
        "label": {
            "description": "Label",
            "required": false,
            "type": "array"
        },
        "label__empty": {
            "description": "Label is empty/null (boolean)",
            "required": false,
            "type": "boolean"
        },
        "label__ic": {
            "description": "Label contains (case-insensitive)",
            "required": false,
            "type": "array"
        },
        "label__ie": {
            "description": "Label exact match (case-insensitive)",
            "required": false,
            "type": "array"
        },
        "label__iew": {
            "description": "Label ends with (case-insensitive)",
            "required": false,
            "type": "array"
        },
        "label__isw": {
            "description": "Label starts with (case-sensitive)",
            "required": false,
            "type": "array"
        },
        "label__n": {
            "description": "Label not equal to",
            "required": false,
            "type": "array"
        },
        "label__nic": {
            "description": "Label does not contain (case-insensitive)",
            "required": false,
            "type": "array"
        },
        "label__nie": {
            "description": "Label inverse exact match (case-insensitive)",
            "required": false,
            "type": "array"
        },
        "label__niew": {
            "description": "Label does not end with (case-insensitive)",
            "required": false,
            "type": "array"
        },
        "label__nisw": {
            "description": "Label does not start with (case-sensitive)",
            "required": false,
            "type": "array"
        },
        "last_updated": {
            "description": "Last_updated",
            "required": false,
            "type": "array"
        },
        "last_updated__empty": {
            "description": "Last_updated is empty/null (boolean)",
            "required": false,
            "type": "array"
        },
        "last_updated__gt": {
            "description": "Last_updated greater than",
            "required": false,
            "type": "array"
        },
        "last_updated__gte": {
            "description": "Last_updated greater than or equal to",
            "required": false,
            "type": "array"
        },
        "last_updated__lt": {
            "description": "Last_updated less than",
            "required": false,
            "type": "array"
        },
        "last_updated__lte": {
            "description": "Last_updated less than or equal to",
            "required": false,
            "type": "array"
        },
        "last_updated__n": {
            "description": "Last_updated not equal to",
            "required": false,
            "type": "array"
        },
        "limit": {
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
        },
        "modified_by_request": {
            "description": "Modified_by_request",
            "required": false,
            "type": "string"
        },
        "module_type_id": {
            "description": "Module type (ID)",
            "required": false,
            "type": "array"
        },
        "module_type_id__n": {
            "description": "Module_type_id not equal to",
            "required": false,
            "type": "array"
        },
        "moduletype_id": {
            "description": "Module type (ID)",
            "required": false,
            "type": "array"
        },
        "moduletype_id__n": {
            "description": "Moduletype_id not equal to",
            "required": false,
            "type": "array"
        },
        "name": {
            "description": "Name",
            "required": false,
            "type": "array"
        },
        "name__empty": {
            "description": "Name is empty/null (boolean)",
            "required": false,
            "type": "boolean"
        },
        "name__ic": {
            "description": "Name contains (case-insensitive)",
            "required": false,
            "type": "array"
        },
        "name__ie": {
            "description": "Name exact match (case-insensitive)",
            "required": false,
            "type": "array"
        },
        "name__iew": {
            "description": "Name ends with (case-insensitive)",
            "required": false,
            "type": "array"
        },
        "name__isw": {
            "description": "Name starts with (case-sensitive)",
            "required": false,
            "type": "array"
        },
        "name__n": {
            "description": "Name not equal to",
            "required": false,
            "type": "array"
        },
        "name__nic": {
            "description": "Name does not contain (case-insensitive)",
            "required": false,
            "type": "array"
        },
        "name__nie": {
            "description": "Name inverse exact match (case-insensitive)",
            "required": false,
            "type": "array"
        },
        "name__niew": {
            "description": "Name does not end with (case-insensitive)",
            "required": false,
            "type": "array"
        },
        "name__nisw": {
            "description": "Name does not start with (case-sensitive)",
            "required": false,
            "type": "array"
        },
        "offset": {
            "description": "The initial index from which to return the results.",
            "required": false,
            "type": "integer"
        },
        "ordering": {
            "description": "Which field to use when ordering the results.",
            "required": false,
            "type": "string"
        },
        "power_port_id": {
            "description": "Power port (ID)",
            "required": false,
            "type": "array"
        },
        "power_port_id__n": {
            "description": "Power_port_id not equal to",
            "required": false,
            "type": "array"
        },
        "q": {
            "description": "Search",
            "required": false,
            "type": "string"
        },
        "save_in_key_store": {
            "default": false,
            "description": "Save the result of the action as a json object in the st2 key store. Used when the expected result from Netbox is very large and the result will be piped to another action. You must also specify a save_in_key_store_keyname and an optional save_in_key_store_ttl.",
            "type": "boolean"
        },
        "save_in_key_store_key_name": {
            "description": "Name of the key to store the json result value in the st2 key store. Must be used with save_in_key_store and optionally save_in_key_store_ttl.",
            "type": "string"
        },
        "save_in_key_store_ttl": {
            "default": 60,
            "description": "TTL (seconds) of the saved json result in the st2 key store. Defaults to 60 seconds. Must be used with save_in_key_store and save_in_key_store_key_name.",
            "type": "integer"
        },
        "type": {
            "description": "* `IEC 60320` - [(&#39;iec-60320-c5&#39;, &#39;C5&#39;), (&#39;iec-60320-c7&#39;, &#39;C7&#39;), (&#39;iec-60320-c13&#39;, &#39;C13&#39;), (&#39;iec-60320-c15&#39;, &#39;C15&#39;), (&#39;iec-60320-c19&#39;, &#39;C19&#39;), (&#39;iec-60320-c21&#39;, &#39;C21&#39;)] * `IEC 60309` - [(&#39;iec-60309-p-n-e-4h&#39;, &#39;P+N+E 4H&#39;), (&#39;iec-60309-p-n-e-6h&#39;, &#39;P+N+E 6H&#39;), (&#39;iec-60309-p-n-e-9h&#39;, &#39;P+N+E 9H&#39;), (&#39;iec-60309-2p-e-4h&#39;, &#39;2P+E 4H&#39;), (&#39;iec-60309-2p-e-6h&#39;, &#39;2P+E 6H&#39;), (&#39;iec-60309-2p-e-9h&#39;, &#39;2P+E 9H&#39;), (&#39;iec-60309-3p-e-4h&#39;, &#39;3P+E 4H&#39;), (&#39;iec-60309-3p-e-6h&#39;, &#39;3P+E 6H&#39;), (&#39;iec-60309-3p-e-9h&#39;, &#39;3P+E 9H&#39;), (&#39;iec-60309-3p-n-e-4h&#39;, &#39;3P+N+E 4H&#39;), (&#39;iec-60309-3p-n-e-6h&#39;, &#39;3P+N+E 6H&#39;), (&#39;iec-60309-3p-n-e-9h&#39;, &#39;3P+N+E 9H&#39;)] * `IEC 60906-1` - [(&#39;iec-60906-1&#39;, &#39;IEC 60906-1&#39;), (&#39;nbr-14136-10a&#39;, &#39;2P+T 10A (NBR 14136)&#39;), (&#39;nbr-14136-20a&#39;, &#39;2P+T 20A (NBR 14136)&#39;)] * `NEMA (Non-locking)` - [(&#39;nema-1-15r&#39;, &#39;NEMA 1-15R&#39;), (&#39;nema-5-15r&#39;, &#39;NEMA 5-15R&#39;), (&#39;nema-5-20r&#39;, &#39;NEMA 5-20R&#39;), (&#39;nema-5-30r&#39;, &#39;NEMA 5-30R&#39;), (&#39;nema-5-50r&#39;, &#39;NEMA 5-50R&#39;), (&#39;nema-6-15r&#39;, &#39;NEMA 6-15R&#39;), (&#39;nema-6-20r&#39;, &#39;NEMA 6-20R&#39;), (&#39;nema-6-30r&#39;, &#39;NEMA 6-30R&#39;), (&#39;nema-6-50r&#39;, &#39;NEMA 6-50R&#39;), (&#39;nema-10-30r&#39;, &#39;NEMA 10-30R&#39;), (&#39;nema-10-50r&#39;, &#39;NEMA 10-50R&#39;), (&#39;nema-14-20r&#39;, &#39;NEMA 14-20R&#39;), (&#39;nema-14-30r&#39;, &#39;NEMA 14-30R&#39;), (&#39;nema-14-50r&#39;, &#39;NEMA 14-50R&#39;), (&#39;nema-14-60r&#39;, &#39;NEMA 14-60R&#39;), (&#39;nema-15-15r&#39;, &#39;NEMA 15-15R&#39;), (&#39;nema-15-20r&#39;, &#39;NEMA 15-20R&#39;), (&#39;nema-15-30r&#39;, &#39;NEMA 15-30R&#39;), (&#39;nema-15-50r&#39;, &#39;NEMA 15-50R&#39;), (&#39;nema-15-60r&#39;, &#39;NEMA 15-60R&#39;)] * `NEMA (Locking)` - [(&#39;nema-l1-15r&#39;, &#39;NEMA L1-15R&#39;), (&#39;nema-l5-15r&#39;, &#39;NEMA L5-15R&#39;), (&#39;nema-l5-20r&#39;, &#39;NEMA L5-20R&#39;), (&#39;nema-l5-30r&#39;, &#39;NEMA L5-30R&#39;), (&#39;nema-l5-50r&#39;, &#39;NEMA L5-50R&#39;), (&#39;nema-l6-15r&#39;, &#39;NEMA L6-15R&#39;), (&#39;nema-l6-20r&#39;, &#39;NEMA L6-20R&#39;), (&#39;nema-l6-30r&#39;, &#39;NEMA L6-30R&#39;), (&#39;nema-l6-50r&#39;, &#39;NEMA L6-50R&#39;), (&#39;nema-l10-30r&#39;, &#39;NEMA L10-30R&#39;), (&#39;nema-l14-20r&#39;, &#39;NEMA L14-20R&#39;), (&#39;nema-l14-30r&#39;, &#39;NEMA L14-30R&#39;), (&#39;nema-l14-50r&#39;, &#39;NEMA L14-50R&#39;), (&#39;nema-l14-60r&#39;, &#39;NEMA L14-60R&#39;), (&#39;nema-l15-20r&#39;, &#39;NEMA L15-20R&#39;), (&#39;nema-l15-30r&#39;, &#39;NEMA L15-30R&#39;), (&#39;nema-l15-50r&#39;, &#39;NEMA L15-50R&#39;), (&#39;nema-l15-60r&#39;, &#39;NEMA L15-60R&#39;), (&#39;nema-l21-20r&#39;, &#39;NEMA L21-20R&#39;), (&#39;nema-l21-30r&#39;, &#39;NEMA L21-30R&#39;), (&#39;nema-l22-30r&#39;, &#39;NEMA L22-30R&#39;)] * `California Style` - [(&#39;CS6360C&#39;, &#39;CS6360C&#39;), (&#39;CS6364C&#39;, &#39;CS6364C&#39;), (&#39;CS8164C&#39;, &#39;CS8164C&#39;), (&#39;CS8264C&#39;, &#39;CS8264C&#39;), (&#39;CS8364C&#39;, &#39;CS8364C&#39;), (&#39;CS8464C&#39;, &#39;CS8464C&#39;)] * `ITA/International` - [(&#39;ita-e&#39;, &#39;ITA Type E (CEE 7/5)&#39;), (&#39;ita-f&#39;, &#39;ITA Type F (CEE 7/3)&#39;), (&#39;ita-g&#39;, &#39;ITA Type G (BS 1363)&#39;), (&#39;ita-h&#39;, &#39;ITA Type H&#39;), (&#39;ita-i&#39;, &#39;ITA Type I&#39;), (&#39;ita-j&#39;, &#39;ITA Type J&#39;), (&#39;ita-k&#39;, &#39;ITA Type K&#39;), (&#39;ita-l&#39;, &#39;ITA Type L (CEI 23-50)&#39;), (&#39;ita-m&#39;, &#39;ITA Type M (BS 546)&#39;), (&#39;ita-n&#39;, &#39;ITA Type N&#39;), (&#39;ita-o&#39;, &#39;ITA Type O&#39;), (&#39;ita-multistandard&#39;, &#39;ITA Multistandard&#39;)] * `USB` - [(&#39;usb-a&#39;, &#39;USB Type A&#39;), (&#39;usb-micro-b&#39;, &#39;USB Micro B&#39;), (&#39;usb-c&#39;, &#39;USB Type C&#39;)] * `Molex` - [(&#39;molex-micro-fit-1x2&#39;, &#39;Molex Micro-Fit 1x2&#39;), (&#39;molex-micro-fit-2x2&#39;, &#39;Molex Micro-Fit 2x2&#39;), (&#39;molex-micro-fit-2x4&#39;, &#39;Molex Micro-Fit 2x4&#39;)] * `DC` - [(&#39;dc-terminal&#39;, &#39;DC Terminal&#39;)] * `Proprietary` - [(&#39;hdot-cx&#39;, &#39;HDOT Cx&#39;), (&#39;saf-d-grid&#39;, &#39;Saf-D-Grid&#39;), (&#39;neutrik-powercon-20a&#39;, &#39;Neutrik powerCON (20A)&#39;), (&#39;neutrik-powercon-32a&#39;, &#39;Neutrik powerCON (32A)&#39;), (&#39;neutrik-powercon-true1&#39;, &#39;Neutrik powerCON TRUE1&#39;), (&#39;neutrik-powercon-true1-top&#39;, &#39;Neutrik powerCON TRUE1 TOP&#39;), (&#39;ubiquiti-smartpower&#39;, &#39;Ubiquiti SmartPower&#39;)] * `Other` - [(&#39;hardwired&#39;, &#39;Hardwired&#39;), (&#39;other&#39;, &#39;Other&#39;)]",
            "required": false,
            "type": "string"
        },
        "type__n": {
            "description": "Type not equal to",
            "required": false,
            "type": "string"
        },
        "updated_by_request": {
            "description": "Updated_by_request",
            "required": false,
            "type": "string"
        }
    },
    "runner_type": "python-script"
}
